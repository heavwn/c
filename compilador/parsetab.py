
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN BOOLEAN COLON COMMA DIVIDE DOT EMPTY END FLOAT ID INTEGER LPAREN MINUS NUM PLUS PROGRAM READ REAL RPAREN SEMICOLON STRING TIMES VAR WRITEprogram : PROGRAM ID SEMICOLON declarations block DOTdeclarations : VAR declarations_list\n                    | emptydeclarations_list : ID COLON type SEMICOLON declarations_list\n                        | ID COLON type declarations_list\n                        | emptytype : INTEGER SEMICOLON\n    | FLOAT SEMICOLON\n    | STRING SEMICOLON\n    | BOOLEAN SEMICOLON\n    | REAL SEMICOLONblock : BEGIN statements ENDstatements : statement SEMICOLON statements\n                  | emptyexpression : expression PLUS expression\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMfactor : NUM DOT NUMfactor : IDfactor : STRINGstatement : WRITE LPAREN expression RPARENstatement : ID ASSIGN expressionempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,13,],[0,-1,]),'ID':([2,6,9,21,22,23,24,38,40,41,42,43,44,46,47,48,],[3,11,18,18,35,35,11,11,-7,-8,-9,-10,-11,35,35,35,]),'SEMICOLON':([3,15,24,25,26,27,28,29,32,33,34,35,36,37,40,41,42,43,44,45,51,52,53,54,],[4,21,38,40,41,42,43,44,-16,-19,-20,-22,-23,-25,-7,-8,-9,-10,-11,-24,-15,-17,-18,-21,]),'VAR':([4,],[6,]),'BEGIN':([4,5,6,7,10,12,24,38,39,40,41,42,43,44,50,],[-26,9,-26,-3,-2,-6,-26,-26,-5,-7,-8,-9,-10,-11,-4,]),'DOT':([8,20,34,],[13,-12,49,]),'WRITE':([9,21,],[17,17,]),'END':([9,14,16,21,30,],[-26,20,-14,-26,-13,]),'COLON':([11,],[19,]),'LPAREN':([17,],[22,]),'ASSIGN':([18,],[23,]),'INTEGER':([19,],[25,]),'FLOAT':([19,],[26,]),'STRING':([19,22,23,46,47,48,],[27,36,36,36,36,36,]),'BOOLEAN':([19,],[28,]),'REAL':([19,],[29,]),'NUM':([22,23,46,47,48,49,],[34,34,34,34,34,54,]),'RPAREN':([31,32,33,34,35,36,51,52,53,54,],[45,-16,-19,-20,-22,-23,-15,-17,-18,-21,]),'PLUS':([31,32,33,34,35,36,37,51,52,53,54,],[46,-16,-19,-20,-22,-23,46,46,-17,-18,-21,]),'TIMES':([32,33,34,35,36,52,53,54,],[47,-19,-20,-22,-23,-17,-18,-21,]),'DIVIDE':([32,33,34,35,36,52,53,54,],[48,-19,-20,-22,-23,-17,-18,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,],[5,]),'empty':([4,6,9,21,24,38,],[7,12,16,16,12,12,]),'block':([5,],[8,]),'declarations_list':([6,24,38,],[10,39,50,]),'statements':([9,21,],[14,30,]),'statement':([9,21,],[15,15,]),'type':([19,],[24,]),'expression':([22,23,46,],[31,37,51,]),'term':([22,23,46,],[32,32,32,]),'factor':([22,23,46,47,48,],[33,33,33,52,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declarations block DOT','program',6,'p_program','analisador_sintatico.py',36),
  ('declarations -> VAR declarations_list','declarations',2,'p_declarations','analisador_sintatico.py',42),
  ('declarations -> empty','declarations',1,'p_declarations','analisador_sintatico.py',43),
  ('declarations_list -> ID COLON type SEMICOLON declarations_list','declarations_list',5,'p_declarations_list','analisador_sintatico.py',47),
  ('declarations_list -> ID COLON type declarations_list','declarations_list',4,'p_declarations_list','analisador_sintatico.py',48),
  ('declarations_list -> empty','declarations_list',1,'p_declarations_list','analisador_sintatico.py',49),
  ('type -> INTEGER SEMICOLON','type',2,'p_type','analisador_sintatico.py',52),
  ('type -> FLOAT SEMICOLON','type',2,'p_type','analisador_sintatico.py',53),
  ('type -> STRING SEMICOLON','type',2,'p_type','analisador_sintatico.py',54),
  ('type -> BOOLEAN SEMICOLON','type',2,'p_type','analisador_sintatico.py',55),
  ('type -> REAL SEMICOLON','type',2,'p_type','analisador_sintatico.py',56),
  ('block -> BEGIN statements END','block',3,'p_block','analisador_sintatico.py',61),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','analisador_sintatico.py',65),
  ('statements -> empty','statements',1,'p_statements','analisador_sintatico.py',66),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','analisador_sintatico.py',71),
  ('expression -> term','expression',1,'p_expression_binop','analisador_sintatico.py',72),
  ('term -> term TIMES factor','term',3,'p_term','analisador_sintatico.py',76),
  ('term -> term DIVIDE factor','term',3,'p_term','analisador_sintatico.py',77),
  ('term -> factor','term',1,'p_term','analisador_sintatico.py',78),
  ('factor -> NUM','factor',1,'p_factor_num','analisador_sintatico.py',82),
  ('factor -> NUM DOT NUM','factor',3,'p_factor_real','analisador_sintatico.py',86),
  ('factor -> ID','factor',1,'p_factor_id','analisador_sintatico.py',90),
  ('factor -> STRING','factor',1,'p_factor_string','analisador_sintatico.py',94),
  ('statement -> WRITE LPAREN expression RPAREN','statement',4,'p_statement_write','analisador_sintatico.py',99),
  ('statement -> ID ASSIGN expression','statement',3,'p_statement_assign','analisador_sintatico.py',103),
  ('empty -> <empty>','empty',0,'p_empty','analisador_sintatico.py',108),
]
